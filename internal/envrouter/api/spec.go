// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYwW7jNhD9FUPt0Yicbg8L37zpIjBQBIHT9rLIgZHGMXclkeGMEhiG/70gZa1IibKo",
	"xDb2lJgcDue9eUMOtYsSkUtRQEEYzXcRJhvImfl3IWXGE0ZcFPqnVEKCIg5msmA56L+0lRDNIyTFi+do",
	"P40USIGchNre9Zm8wdNGiB+eObP+peQK0mj+rdrkcVpbiafvkJD2cCPynFM3KlbSRijvpjkgsmd/QLhh",
	"3nHiOSCxXA6Hql14I1WQQkGcZfgAiQL6myMtCfIRlFYDQWQdjIMiWcFLCehh8QdsvXFIhvgmVOqdLBFU",
	"D4JWoNq9ZW/59YX9tXjlShQ5FBRMWaiMlgUSKxLwCMnVfgdtYgT40KMbcGPuzB8pnvVRBUBR5hpRCjIT",
	"W+O/wdWD3sxOa3nYoU0dmMcIuhfpqTlKFDCC9B/eQ8W7OZRM1YcZJ8jxCKERU4ptzaINw76UsNQuhych",
	"MmDFsWwhMUWQ+hcdJntw+2u6P2l1fDUCl9cmFF9yV1X470mqnvrdwI9+i5sLJD7cHvHhfO7lqAVTG7Vx",
	"HTbqCfwLL1LtaXT8Q7IKivd4PtY9Qdf3YjfopH00e0PjeAdvflH1FkOpsmCVadupJ5YuGu2AF2uhXaeA",
	"ieKyIlyf1kqUBGqyuF/q24hTBp7xV1BYrbi+ml3NdKhCQsEkj+bRp6vZ1SdzL9DG8BMzyePX69hi2ow/",
	"V0xpKs3gMo3m0S3QQvL/rhe2sQaMUhRYEf7HbGZ4FwUdhGC5jr9jJZ5Kzc5Bckz0dr/UOWI0ZS5Vt0CT",
	"jCNNxHriANsbYx/meKdTtTcCKqnL/r8yZQSThSNIl537ssvOXX0NK5YDgcJo/m0Xce1Rp6C+POa1UBrt",
	"kCphavHU1tljZQxIX0R1igZTHsz0vpLzB7I7Yqt2Eh/KJAFs56xTQ8NqvekuuYRm+9vTkQr2QDYrpECP",
	"UG/MJTVpdp9gddZ05CrwKD+n11Zvm+wV2vX59m0y8X7ZWQdGChkQdAX4lxnv4fjMJ4ND5Z9dmfhhWrfv",
	"cF19tY0vUVH2e2VkDTnAXMzPnGIF62G8t5xW2u6MR6LuG4M1WQV+aH04YLxzPxDs46rRw3iHG7YPw9e4",
	"WznOqrYT9ZMjRLRo7MI1O/V6aX3w+FgRnC5LdQsemijePPWGVba0jS9RVfZDdGRV1cD6AIejvSzUU+FU",
	"P19Lw0hXlq2/gl5KUNtG/O7bZ7h0Wsvdh9To5dW78Xz1FZQv6zU6MmP2ysFeyTLubZLc9J2jO3JDPmc/",
	"1CYn5AyzL5oArVvGlxHKzy8AgUJhWTZxMGkzLPOcqW2vyel67g5D59BTw8m59WTvNF5P41ppm7pfqInW",
	"8gH1Wsdgvg5FGyI5j+NMJCzbCKT559nnWRztH/f/BwAA//+9nlm+HRoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
