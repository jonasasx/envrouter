// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXQU/jOhD+K5HfO1ZN+ngHlFthEaq0Qgi0e0EcvMmUmk1sY0+6qqr+95WdpnVihya7",
	"0BPF/jye75tvpu6WZKKUggNHTdIt0dkKSmo/zqUsWEaRCW7+lUpIUMjAbnJagvmLGwkkJRoV4y9kNyEK",
	"pNAMhdrchSEW81YxBTlJn+pAz5MGJX68QoYm0LWCHDgyWuhHyBTgV6ZxgVCOSKZeGJTCHjwokwd4q0Cj",
	"n8hP2ATzkFTrX0Llwc1Kg+KDtDLhHbwTN5T2DV8zJXgJHAdLNrQ4C66R8gz8wLTtGo9tJsqS4eOKBneh",
	"nbO3/47tlu86AHhVGkY5yEJsbPwjrx72dnfS2MNNbdKiGRLoAZZXjOcm7GiJTokQ5tpJvj/dOkA46aZ3",
	"/aSzbhOMq0+lisGNaLCTwIV+yiYA40thQuegM8VkraoxvxIVgorm9wvT3AwLCKyvQen6xGyaTBOTqpDA",
	"qWQkJRfTZHph2wxXVoSYShavZ7Ejp11/qeUwetnFRU5Scgs4l+z7bO6CDWEtBde1qv8liRVXcNxX2wkd",
	"v+raIfVQNp8YQmkP/mtNQP6Jj+M73s/u2B3chxYgVCm6qSVrS3ULGBVMYySWUYvYzoJDnOOtKdXOuqRC",
	"X/1vMqcI0bzlurY695Wvzl0z1RQtAUFpkj5tCTMRTQmaXkwboxy9g6qCiaNT12fPNRg0Xol8M0rywUrv",
	"ajv/RXVHXNUt4mOVZaC7NfN66LRbr/0j5/Bs/7f9SAcHKNsTUuiAUa8VGKMeb490PWs8uwr9rj4f763e",
	"V0fQaLPPu/dYiT+3nTMwcigAwTfgF7veo/EnT4aWlP/7NgnTdL5iT/fVjQs+R0e5z7+RPdQi1ubM9g+/",
	"04QXB+Q52B4epCOpHvm0earD++000wcHew6uzttyJFv35Mmh6IB7p2GX+sePwXbKnzn4uuIMGQGHX7sM",
	"hvjEAZ/HKIf3/ECj0KKIWpwMTFdlSc1vgj6IwYBaN2PZvvXJClGmcVyIjBYroTG9TC6TmOyed78DAAD/",
	"/1jtufp0EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
