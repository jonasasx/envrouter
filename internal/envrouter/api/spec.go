// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYQW/iPBD9K5G/74gIbPdQ5Ua7VYW0qqp2dy9VD24yFHcT27UnVAjx31d2CHGIA0kX",
	"0J6a2uPxvDfP4zErEotMCg4cNYlWRMdzyKj9nEiZspgiE9z8K5WQoJCBneQ0A/MXlxJIRDQqxl/JekAU",
	"SKEZCrW885tYm/ecKUhI9FQ4eh6UVuLlDWI0jq4VJMCR0VQ/QqwAvzONU4SsRzDFQKcQNsadInmA9xw0",
	"NgP5DUtvHJJq/SFU4p3MNSjeiSvj3rF3/PrCvuELpgTPgGNnyromZ8o1Uh5D0zGtq6aBNhZZxvBxTr2z",
	"UI+5Mb9HdrO9CgCeZwZRAjIVS+u/wtWC3s4OSnm4oQ1qMPcRdC+SY3MUK6AIyQ/WQsWnOZRzqtvYpYmr",
	"7BchUqB8H/EaqUJI/Is2ky0Q/Meznf8yvhJBnaIqFF+eHmB2xXhi9u2dpkNE+6nZQbcf1qwl6LLGNoOO",
	"d4uVNzSm7+DDn5tWeeQq7ZwsYzvwxNJEYxwwPhPGdQI6VkwWhJv6pUSOoILJ/dTUZ4YpeMYXoHSxYjwc",
	"DUcmVCGBU8lIRC6Go+GFrZQ4t/yEVLJwMQ4dpu34a8GUodIOThMSkVvAiWS/xhPX2ADWUnBdEP5lNLK8",
	"C44bITiuwzddiKe4V80XQ8jswv+tPsh/YXUDh5vrN3Tv3m0VI1Qpuiwoq1N1CxikTGMgZkEN2Noa+zCH",
	"K5OqtRVQjk32f8qEIgSTmiDr7NznTXbuyotJ0QwQlCbR04ow49GkoCynUSmUSjuochg4PO3q7LkwBo1X",
	"oihGnSnvzPS6kPNfZLfHVrtJfMzjGPRuzhpn6LBar5tLzqHZ9oatp4I9kO0KKbRHqNe21gfV7oEuak1D",
	"rkLv5ef42mptHL1CG59u3yoTn5edUzASSAGhKcBvdryF4xNXhhqVX5sy8cN0bt/D5+rGNT7HiXI7+J5n",
	"qAasjplVrelhzFPX+ByY3ca5J+YSWBvg7mjPC/VYONW2lz2M9MGxPQdWp8/uidZdefAWcIxby/8u9OPX",
	"/XrIp6z0u+R0qXnbX2gYdNGJY3weoWzfNh2FQtM0qGEyZjrPMmreRy0mx+smGgydQk8VJ6fWk7tTfz31",
	"axJc6v6h9sDIB9SijMG+e8kcUUZhmIqYpnOhMbocXY5Csn5e/wkAAP//l1BBKkMVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

