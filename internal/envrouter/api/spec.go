// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYwW7bOhD8FYHvHQ3LbnoIdHPSIDBQBEHS9hLkwEjrmKlEMuTKhWH43wtSlkVJlC2l",
	"jk91yeFyZ3a4pLIhscik4MBRk2hDdLyEjNqfMylTFlNkgpv/SiUkKGRgJznNwPyLawkkIhoV469kOyIK",
	"pNAMhVrf+SEW854zBQmJnopAz6MSJV7eIEYT6FpBAhwZTfUjxArwO9M4R8gGJFMM9EphB+6VyQO856Cx",
	"nchvWHvzkFTrP0Il3slcg+K9tDLhHbwT15f2DV8xJXgGHHtL1rc4c66R8hjagWndNS22scgyho9L6p2F",
	"es6t+QO2Wxx0APA8M4wSkKlY2/gVrw72dnZU2sNNbVSjeUige5GcWqNYAUVIfrAOKT6soVxS3aUuTVxn",
	"vwiRAuWHhNdIFULiX7Sb7KDgP57d+pf5lQzqElWp+Or0AIsrxhOz7+AyHRPaL02D3WFai46kyx7bTjpu",
	"NqthHshV2rsiBjvybNhO2QRgfCFM6AR0rJgsVDVNSokcQQWz+7lpwgxT8IyvQOlixXQ8GU9MqkICp5KR",
	"iFyMJ+ML2w5xaUUIqWThaho6ctrx10IOo5cdnCckIreAM8l+TWcu2BDWUnBdqPplMrHiCo67ajuhwzdd",
	"OKS4PM0vhpDZhf9bE5D/wuqaDXd3bOhesPtWRahSdF1IVpfqFjBImcZALIIasa0F+ziHG1OqrXVJjm31",
	"f8qEIgSzmuvq6tznbXXuyttH0QwQlCbR04YwE9GUoOyZUWmUyjuochg5OjV99lyAQeOVKDpOb8l7K70t",
	"7PwP1R2wVbOIj3kcg27WrHWGjrv1ur3kHJ7tfpUNdLCHsl0hhfYY9do29KDaPdBFr2nZVeiD+pzeW52v",
	"Q6/Rpp+3b1WJj9vOaRgJpIDQNuA3O96h8Sd3hpqUX9s28dN0rtjj5+rGBZ/jRLnP9IFnqEaszplV78/j",
	"nOcu+Byc3dfxQM4lsS7C/dmel+qpeKr9g/U40wcHew6uzmN6IFt35dFbwAF3tv8m9dP3/XrKn9npm+L0",
	"6Xn7P8Mw6OMTB3weo+w/YHoahaZpUONkYDrPMmo+grogBgNqVd5D9uOGLBFlFIapiGm6FBqjy8nlJCTb",
	"5+3fAAAA///qacIODRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

