// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYTW/jNhD9KwLbo2HZ3R4WunnTxcJAEQRJ28siB0Yar7krkQw5cmAY/u8FKSsiLdKW",
	"trbRUxJySM578+ZD2ZFcVFJw4KhJtiM6X0NF7a8LKUuWU2SCmz+lEhIUMrCbnFZgfuJWAsmIRsX4N7Kf",
	"EAVSaIZCbe9jJm/wshbiR2DPnn+tmYKCZF+bR54nrZV4+Q45mhvuFBTAkdFSP0GuAP9kGpcI1QhHm4VB",
	"LhyMB3nyCK81aOw78gO2QT8k1fpNqCK4WWtQEQRHjprrHXvn3pDbn/mGKcEr4DiYsqHBWXKNlOfQv5j6",
	"iuqhzUVVMXxa0+Au+D739k9IcnVSAcDryiAqQJZia+/vcEXQ291JKw/XtYkH8xRBD6K4NEe5AopQ/MUi",
	"VPw0h5KqtkQwhEqfIJRQpejWHlpTHQsJLdx0eBGiBMpPRUsjVQhF+NBhM4I7nNPxoLX+tQh8XjtXQsF9",
	"hNUnxgvz7ujYnotOmJojdKdhrSJOt0W773R+XOGCrjF9D2/h2EQ1VatycLCM7STgSx+NuYDxlTBXF6Bz",
	"xWRDuCl6StQIKlk8LE1RZ1hCYH0DSjcn5tPZdGZcFRI4lYxk5MN0Nv1gyyuuLT8plSzdzFOHabv+rWHK",
	"UGkXlwXJyBfAhWT/zBeusQGspeC6Ify32czyLjgehOBcnX7XjXiaRu3l469WH+SXtGvp6aGfp24z72Wq",
	"ocyn6gtgUjKNiVglHrC9NQ5hTncmVHsroBr77P8tC4qQLDxB+uw81H127ttupmgFCEqT7OuOMHOjCUFb",
	"g7NWKJ12UNUwcXg61tlzYwwaP4mmGA2mfDDT+0bO/yG6I546DuJTneegj2PWy6Hzar3rH7mFZuNT3kgF",
	"ByDbE1LogFDvbK1PutcT3dSanlyFPsnP5bUVnTaDQptf790uEj8vO6dgFFACQl+Af9j1CMdXrgwelb/3",
	"ZRKG6XTf83n12TW+RUa5Y//IHPKA+ZhZN8+ex7x0jW+B2Z22R2JugcUAD0d7W6iXwqneZ9nzSB8d23BS",
	"vtagtl1W+pNpPBkn4eP+mDv6uGFxXAm4Qrycb4WREXNPnu1kjnG0hfnhu0bv8l2+Zrc6JmdI3X7/txWD",
	"IVp3jG8jlPfvs4FCoWWZeJiMma6rippvvIjJ5SaiHkPX0FPHybX15L40Xk/jBh2Xuv/RiGPkA2rT+mC/",
	"3ckaUWZpWoqclmuhMfs4+zhLyf55/28AAAD//wwj+1lYFgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

